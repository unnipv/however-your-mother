import { NextResponse } from 'next/server';
import { supabase } from '@/lib/supabaseClient'; // Import Supabase client
import { MemoryFormData } from '@/types';
import { generateSlug } from '@/lib/utils';
// import { v4 as uuidv4 } from 'uuid'; // Not strictly needed here if ID is DB generated
import argon2 from 'argon2'; // Using argon2 now

const PLACEHOLDER_THUMBNAIL_URL = "https://i.redd.it/5ljj0hepj8vd1.jpeg";

// GET all memories
export async function GET() {
  try {
    const { data: memoriesData, error } = await supabase
      .from('memories')
      .select('*') // Select all fields initially
      .order('created_at', { ascending: false });

    if (error) throw error;

    // Process memories to replace thumbnail for protected ones
    const processedMemories = memoriesData.map(memory => {
      if (memory.password && memory.password.trim() !== '') { // Check if password field is not null/empty
        return { ...memory, thumbnail_url: PLACEHOLDER_THUMBNAIL_URL };
      }
      return memory; // Return original memory if not protected
    });

    return NextResponse.json(processedMemories, {
      status: 200,
      headers: {
        'Cache-Control': 'no-store, max-age=0',
      },
    });
  } catch (error) {
    console.error("Failed to fetch memories:", error);
    const errorMessage = error instanceof Error ? error.message : "Failed to fetch memories";
    return NextResponse.json({ message: errorMessage }, {
      status: 500,
      headers: {
        'Cache-Control': 'no-store, max-age=0',
      },
    });
  }
}

// POST a new memory
export async function POST(request: Request) {
  try {
    const body: MemoryFormData = await request.json();

    // Basic validation (can be enhanced with Zod on the server-side too)
    if (!body.title || !body.content) { // Creator names and short_desc are handled below or optional
      return NextResponse.json({ message: "Missing required fields: title and content" }, {
        status: 400,
        headers: {
          'Cache-Control': 'no-store, max-age=0',
        },
      });
    }

    const creatorName = (body.creator_names && body.creator_names.trim() !== '') ? body.creator_names.trim() : 'Anonymous';
    const slug = generateSlug(body.title);
    
    let hashedPassword = null;
    if (body.password && body.password.trim() !== '') {
      hashedPassword = await argon2.hash(body.password.trim()); // argon2 hash
    }

    const memoryDataForSupabase = {
      // id will be generated by Supabase (ensure your table has default gen_random_uuid())
      title: body.title.trim(),
      slug: slug,
      creator_names: creatorName,
      short_description: body.short_description?.trim(),
      content: typeof body.content === 'string' ? body.content : JSON.stringify(body.content),
      thumbnail_url: body.thumbnail_url?.trim() || null,
      spotify_playlist_id: body.spotify_playlist_id?.trim() || null,
      password: hashedPassword, // Store the hash
      memory_date: body.memory_date && body.memory_date.trim() !== '' ? body.memory_date.trim() : null,
      // created_at and updated_at will be handled by Supabase (ensure default now())
    };

    const { data: newMemory, error } = await supabase
      .from('memories')
      .insert(memoryDataForSupabase)
      .select()
      .single(); // Assuming you want to return the newly created record

    if (error) throw error; // Will be caught by the main catch block

    return NextResponse.json(newMemory, {
      status: 201,
      headers: {
        'Cache-Control': 'no-store, max-age=0',
      },
    });
  } catch (error) {
    console.error("Failed to create memory API error:", error);
    
    interface DbError {
      code?: string;
      message?: string;
      details?: string;
      hint?: string;
    }

    let ErrorMessage = "An unexpected error occurred while creating the memory.";
    let statusCode = 500;

    if (typeof error === 'object' && error !== null) {
      const errAsDbError = error as DbError;
      if (errAsDbError.code === '23505') { // PostgreSQL unique violation (e.g. slug)
        ErrorMessage = "A memory with this title already exists. Please choose a different title.";
        statusCode = 409;
      }
      else if (errAsDbError.code === '42P01') { // PostgreSQL undefined table
        ErrorMessage = "Database error: The memories table seems to be missing or incorrectly configured.";
        console.error("Supabase error 42P01: 'memories' table likely missing or RLS issue.");
        // statusCode remains 500 for this internal server error type
      }
      else if (typeof errAsDbError.message === 'string') {
        ErrorMessage = errAsDbError.message;
      }
    } else if (error instanceof Error) {
      ErrorMessage = error.message;
    } else if (typeof error === 'string') {
      ErrorMessage = error;
    }
    
    return NextResponse.json({ message: ErrorMessage }, {
      status: statusCode,
      headers: {
        'Cache-Control': 'no-store, max-age=0',
      },
    });
  }
} 